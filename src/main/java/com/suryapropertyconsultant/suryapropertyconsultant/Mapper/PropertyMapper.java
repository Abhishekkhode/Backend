// src/main/java/com/suryapropertyconsultant/suryapropertyconsultant/mapper/PropertyMapper.java
package com.suryapropertyconsultant.suryapropertyconsultant.Mapper;

import com.suryapropertyconsultant.suryapropertyconsultant.Entity.Property;
import com.suryapropertyconsultant.suryapropertyconsultant.Dto.PropertyRequestDTO;
import com.suryapropertyconsultant.suryapropertyconsultant.Dto.PropertyResponseDTO;
import org.springframework.stereotype.Component;

@Component // Make this a Spring-managed component
public class PropertyMapper {

    /**
     * Converts a PropertyRequestDTO to a Property Entity.
     * This is typically used when creating a new Property from client input.
     * The 'id' field is not set here as it's generated by MongoDB.
     * @param dto The PropertyRequestDTO containing data from the client.
     * @return A new Property entity.
     */
    public Property toEntity(PropertyRequestDTO dto) {
        if (dto == null) {
            return null;
        }
        Property entity = new Property();
        entity.setTitle(dto.getTitle());
        entity.setLocation(dto.getLocation());
        entity.setPrice(dto.getPrice());
        entity.setStatus(dto.getStatus());
        entity.setBedrooms(dto.getBedrooms());
        entity.setBathrooms(dto.getBathrooms());
        entity.setArea(dto.getArea());
        entity.setParking(dto.getParking());
        entity.setDescription(dto.getDescription());
        entity.setFeatures(dto.getFeatures());
        entity.setYearBuilt(dto.getYearBuilt());
        entity.setPossession(dto.getPossession());
        entity.setImages(dto.getImages());
        return entity;
    }

    /**
     * Converts a Property Entity to a PropertyResponseDTO.
     * This is typically used when sending Property data back to the client.
     * @param entity The Property entity from the database.
     * @return A PropertyResponseDTO containing data to be exposed to the client.
     */
    public PropertyResponseDTO toDto(Property entity) {
        if (entity == null) {
            return null;
        }
        PropertyResponseDTO dto = new PropertyResponseDTO();
        dto.setId(entity.getId()); // Include the generated ID in the response DTO
        dto.setTitle(entity.getTitle());
        dto.setLocation(entity.getLocation());
        dto.setPrice(entity.getPrice());
        dto.setStatus(entity.getStatus());
        dto.setBedrooms(entity.getBedrooms());
        dto.setBathrooms(entity.getBathrooms());
        dto.setArea(entity.getArea());
        dto.setParking(entity.getParking());
        dto.setDescription(entity.getDescription());
        dto.setFeatures(entity.getFeatures());
        dto.setYearBuilt(entity.getYearBuilt());
        dto.setPossession(entity.getPossession());
//        dto.setAgentName(entity.getAgentName());
//        dto.setAgentPhone(entity.getAgentPhone());
//        dto.setAgentEmail(entity.getAgentEmail());
//        dto.setAgentPhoto(entity.getAgentPhoto());
        dto.setImages(entity.getImages());
        return dto;
    }

    /**
     * Updates an existing Property Entity with data from a PropertyRequestDTO.
     * This is primarily used for PUT/PATCH operations to avoid creating a new entity.
     * The 'id' of the entity is NOT updated here.
     * @param dto The PropertyRequestDTO containing the updated data.
     * @param entity The existing Property entity to be updated.
     */
    public void updateEntityFromDto(PropertyRequestDTO dto, Property entity) {
        if (dto == null || entity == null) {
            return;
        }
        entity.setTitle(dto.getTitle());
        entity.setLocation(dto.getLocation());
        entity.setPrice(dto.getPrice());
        entity.setStatus(dto.getStatus());
        entity.setBedrooms(dto.getBedrooms());
        entity.setBathrooms(dto.getBathrooms());
        entity.setArea(dto.getArea());
        entity.setParking(dto.getParking());
        entity.setDescription(dto.getDescription());
        entity.setFeatures(dto.getFeatures());
        entity.setYearBuilt(dto.getYearBuilt());
        entity.setPossession(dto.getPossession());
        entity.setImages(dto.getImages());
        // Do NOT update ID here, as it's an existing entity
    }
}
